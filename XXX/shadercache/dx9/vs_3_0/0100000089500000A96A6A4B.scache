#define VERTEX_SHADER
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 WorldViewProjectionMatrix : register(c32);
float4 FlagCoords : register(c36);

struct VS_INPUT
{
	float4 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
	float2 vMaskCoord : TEXCOORD1;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord0 : TEXCOORD0;
	float2 vTexCoord1 : TEXCOORD1;
};
VS_OUTPUT main(const VS_INPUT v )
		{
			VS_OUTPUT Out;
		
			Out.vPosition  = mul( WorldViewProjectionMatrix, v.vPosition );
		
			Out.vTexCoord1 = v.vMaskCoord;
		
			Out.vTexCoord0.x = v.vTexCoord.x/FlagCoords.x;
			Out.vTexCoord0.x = Out.vTexCoord0.x + FlagCoords.z;
			Out.vTexCoord0.y = v.vTexCoord.y/FlagCoords.y;
			Out.vTexCoord0.y = Out.vTexCoord0.y + FlagCoords.w;
		
			return Out;
		}
		
	